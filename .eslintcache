[{"C:\\Users\\Egor2\\React\\trelloapp\\src\\index.js":"1","C:\\Users\\Egor2\\React\\trelloapp\\src\\App.js":"2","C:\\Users\\Egor2\\React\\trelloapp\\src\\reportWebVitals.js":"3","C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\index.js":"4","C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\index.js":"5","C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\BoardView\\index.js":"6","C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\ColorPickerItem\\index.js":"7","C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\Table\\index.js":"8","C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\Table\\Card\\index.js":"9","C:\\Users\\Egor2\\React\\trelloapp\\src\\SingleTon\\state.js":"10","C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\Table\\table.js":"11","C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\Card\\card.js":"12","C:\\Users\\Egor2\\React\\trelloapp\\src\\utilits\\index.js":"13","C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\Board\\index.js":"14","C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\Filtered\\index.js":"15"},{"size":649,"mtime":1612124515729,"results":"16","hashOfConfig":"17"},{"size":3044,"mtime":1612124452877,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"17"},{"size":3957,"mtime":1612124268396,"results":"20","hashOfConfig":"17"},{"size":4578,"mtime":1612582195742,"results":"21","hashOfConfig":"17"},{"size":1148,"mtime":1612582374855,"results":"22","hashOfConfig":"17"},{"size":237,"mtime":1609740367113,"results":"23","hashOfConfig":"17"},{"size":5281,"mtime":1612582028166,"results":"24","hashOfConfig":"17"},{"size":4684,"mtime":1612124040474,"results":"25","hashOfConfig":"17"},{"size":740,"mtime":1609739463147,"results":"26","hashOfConfig":"17"},{"size":739,"mtime":1612581977999,"results":"27","hashOfConfig":"17"},{"size":295,"mtime":1609789035490,"results":"28","hashOfConfig":"17"},{"size":316,"mtime":1612581944956,"results":"29","hashOfConfig":"17"},{"size":789,"mtime":1612581983986,"results":"30","hashOfConfig":"17"},{"size":861,"mtime":1612124238567,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"cnm794",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},"C:\\Users\\Egor2\\React\\trelloapp\\src\\index.js",[],["65","66"],"C:\\Users\\Egor2\\React\\trelloapp\\src\\App.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\reportWebVitals.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\index.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\index.js",["67"],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\BoardView\\index.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\ColorPickerItem\\index.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\Table\\index.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\Table\\Card\\index.js",["68"],"import { Modal } from '@material-ui/core';\r\nimport { useState } from 'react';\r\nimport { useDrag } from 'react-dnd';\r\nimport styles from './index.module.css';\r\n\r\nexport const Card = (props) => {\r\n\r\n    const [isOpen,setIsOpen] = useState(false);\r\n    const [isTitleEditing,setIsTitleEditing] = useState(false);\r\n    const [titleText,setTitleText] = useState('');\r\n    const [isDescriptionEditing,setIsDescriptionEditing] = useState(true);\r\n    const [descriptionText,setDescriptionText] = useState('');\r\n\r\n    const [, drag] = useDrag({\r\n        item: {\r\n        type: 'card',\r\n        TableId: props.table.id,\r\n        CardId: props.card.id\r\n    }\r\n    })\r\n\r\n    const titleClickHandler = () => {\r\n        setIsTitleEditing(!isTitleEditing);\r\n        if(isTitleEditing && titleText){\r\n            props.card.name = titleText;\r\n            setTitleText('');\r\n        }\r\n    }\r\n\r\n    const descriptionClickHandler = () => {\r\n        setIsDescriptionEditing(!isDescriptionEditing);\r\n        if(isDescriptionEditing && descriptionText){\r\n            props.card.description = descriptionText;\r\n            setDescriptionText('');\r\n        }\r\n    }    \r\n\r\n    return(\r\n        <div>\r\n            <div className={styles['body'] + ' ' + 'toFindCards'} style={{background: props.color}} onClick={() => setIsOpen(true)} data-id={props.card.id} ref={drag}>\r\n                {props.card.name}\r\n                <button className={styles['button']} onClick={() => props.table.deleteCard(props.card.id)}>&#x2715;</button>\r\n            </div>\r\n            <Modal\r\n                open={isOpen}\r\n            >\r\n                <div className={styles['modal-body']}>\r\n                    <div className={styles['wrapper']}>\r\n                        <div className={styles['formContainer']}>\r\n                            <div className={styles['titleContainer']}>\r\n                                <p className={styles['text']}>\r\n                                    Title: \r\n                                    {\r\n                                        isTitleEditing?\r\n                                        <input className={styles['input']} onInput={(e) => setTitleText(e.target.value)}/>:\r\n                                        props.card.name \r\n                                    }\r\n                                    <button className={styles['button']}\r\n                                        style={{color:'#000',fontSize:'18px',textAlign:'center',marginLeft:'5%'}} \r\n                                        onClick={titleClickHandler}>\r\n                                        {\r\n                                            isTitleEditing?\r\n                                            'Apply':\r\n                                            'Edit'\r\n                                        }\r\n                                        </button>\r\n                                </p>\r\n                            </div>\r\n                            <div className={styles['descriptionContainer']}>\r\n                                <p className={styles['text']}>\r\n                                    Description: \r\n                                    {\r\n                                        isDescriptionEditing?\r\n                                        '':\r\n                                        props.card.description \r\n                                    }\r\n                                    <button className={styles['button']}\r\n                                        style={{color:'#000',fontSize:'18px',textAlign:'center',marginLeft:'5%'}} \r\n                                        onClick={descriptionClickHandler}>\r\n                                        {\r\n                                            isDescriptionEditing?\r\n                                            'Apply':\r\n                                            'Edit'\r\n                                        }\r\n                                        </button>\r\n                                </p>\r\n                                {\r\n                                    isDescriptionEditing?\r\n                                    <textarea className={styles['input']} style={{marginLeft:'15%',minHeight:'200px'}} onInput={(e) => setDescriptionText(e.target.value)}/>:\r\n                                    ''\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <button className={styles['button']} style={{color:'#000',display:'flex',alignItems:'flex-start',fontSize:'16px',margin:'7px'}} onClick={() => setIsOpen(false)}>&#x2715;</button>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}","C:\\Users\\Egor2\\React\\trelloapp\\src\\SingleTon\\state.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\Table\\table.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\Card\\card.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\utilits\\index.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\Board\\index.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\Filtered\\index.js",["69"],"import { useEffect } from 'react';\r\nimport { BoardView } from '../BoardView';\r\nimport styles from './index.module.css';\r\n\r\nexport const FilteredBoards = (props) => {\r\n\r\n    useEffect(() => () => {\r\n        props.setIsSearching(false);\r\n    },[])\r\n\r\n    const drawBoardViews = () => {\r\n        const Elements = [];\r\n        const filteredBoards = props.boardState.boards.filter(board => board.title.includes(props.searchText));\r\n\r\n        filteredBoards.forEach((board, index) => {\r\n            Elements.push(\r\n                <BoardView \r\n                    boardState={props.boardState}\r\n                    board={board}\r\n                    key={index}\r\n                />\r\n            )\r\n        })\r\n\r\n        return Elements;\r\n    }\r\n\r\n    return(\r\n        <div className={styles['boards_list']}>\r\n            {drawBoardViews()}\r\n        </div>\r\n    );\r\n}",{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":19,"column":7,"nodeType":"76","endLine":19,"endColumn":9,"suggestions":"77"},{"ruleId":"78","severity":1,"message":"79","line":40,"column":50,"nodeType":"80","messageId":"81","endLine":40,"endColumn":51},{"ruleId":"74","severity":1,"message":"75","line":9,"column":7,"nodeType":"76","endLine":9,"endColumn":9,"suggestions":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["85"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat",["86"],"no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},{"desc":"87","fix":"89"},"Update the dependencies array to be: [props]",{"range":"90","text":"91"},{"range":"92","text":"91"},[574,576],"[props]",[242,244]]