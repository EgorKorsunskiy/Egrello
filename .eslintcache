[{"C:\\Users\\Egor2\\React\\trelloapp\\src\\index.js":"1","C:\\Users\\Egor2\\React\\trelloapp\\src\\App.js":"2","C:\\Users\\Egor2\\React\\trelloapp\\src\\reportWebVitals.js":"3","C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\index.js":"4","C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\index.js":"5","C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\BoardView\\index.js":"6","C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\ColorPickerItem\\index.js":"7","C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\Table\\index.js":"8","C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\Table\\Card\\index.js":"9","C:\\Users\\Egor2\\React\\trelloapp\\src\\SingleTon\\state.js":"10","C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\index.js":"11","C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\Table\\table.js":"12","C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\Card\\card.js":"13"},{"size":486,"mtime":1607784760664,"results":"14","hashOfConfig":"15"},{"size":1756,"mtime":1607891439262,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":3887,"mtime":1607793242864,"results":"18","hashOfConfig":"15"},{"size":2446,"mtime":1607941955932,"results":"19","hashOfConfig":"15"},{"size":527,"mtime":1607788806969,"results":"20","hashOfConfig":"15"},{"size":237,"mtime":1607787304323,"results":"21","hashOfConfig":"15"},{"size":4535,"mtime":1608112654315,"results":"22","hashOfConfig":"15"},{"size":445,"mtime":1608108571305,"results":"23","hashOfConfig":"15"},{"size":579,"mtime":1607785511256,"results":"24","hashOfConfig":"15"},{"size":404,"mtime":1607940729890,"results":"25","hashOfConfig":"15"},{"size":1492,"mtime":1608112620077,"results":"26","hashOfConfig":"15"},{"size":367,"mtime":1608067501629,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"cnm794",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\Egor2\\React\\trelloapp\\src\\index.js",[],["58","59"],"C:\\Users\\Egor2\\React\\trelloapp\\src\\App.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\reportWebVitals.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\index.js",["60","61"],"import { Modal } from '@material-ui/core';\r\nimport { useState } from 'react';\r\nimport { BoardView } from './BoardView';\r\nimport { ColorPickerItem } from './ColorPickerItem';\r\nimport styles from './index.module.css';\r\n\r\nconst MAX_SYMBOLS = 30;\r\n\r\nexport const MainPage = (props) => {\r\n\r\n    const [isOpen, setIsopen] = useState(false);\r\n    const [color, setColor] = useState('rgb(176, 70, 50)');\r\n    const [title, setTitle] = useState('')\r\n\r\n    const toggleModalWindow = () => {\r\n        setIsopen(!isOpen);\r\n    }\r\n\r\n    const drawBoardViews = () => {\r\n        const Elements = [];\r\n\r\n        props.boardState.boards.map((board, index) => {\r\n            Elements.push(\r\n                <BoardView \r\n                    board={board}\r\n                    updateColor={props.updateColor}\r\n                    key={index}\r\n                />\r\n            )\r\n        })\r\n\r\n        return Elements;\r\n    }\r\n\r\n    const drawColorPickerItems = () => {\r\n        const Elements = [];\r\n\r\n        props.boardState.availableColors.map((color, index) => {\r\n            Elements.push(\r\n                <ColorPickerItem \r\n                    color={color}\r\n                    setColor={setColor}\r\n                    key={index}\r\n                />\r\n            )\r\n        })\r\n\r\n        return Elements;\r\n    }\r\n\r\n    const updateTitle = (e) => {\r\n        setTitle(e.target.value);\r\n    }\r\n\r\n    const createBoard = () => {\r\n        if(title.length > MAX_SYMBOLS){\r\n            alert('Your title is too long!');\r\n            return;\r\n        }\r\n        props.boardState.addBoard(title, color)\r\n\r\n        toggleModalWindow();\r\n    }\r\n\r\n    const computeColorPickerItemsHeight = () => {\r\n        let NumberOfColorPickerItems = props.boardState.availableColors.length;\r\n\r\n        if(NumberOfColorPickerItems % 3 === 0){\r\n            return NumberOfColorPickerItems / 3;\r\n        }\r\n        return Math.floor(NumberOfColorPickerItems / 3) + 1;\r\n    }\r\n\r\n    return (\r\n        <div className={styles['main-body']}>\r\n            <p className={styles['label-p']}>Ваши доски</p>\r\n            <div className={styles['boards_list']}>\r\n                {drawBoardViews()}\r\n                <div className={styles['create_border']}>\r\n                    <button onClick={ toggleModalWindow } className={styles['create-button']}>Создать</button>\r\n                </div>\r\n            </div>\r\n            <Modal \r\n                open={isOpen}\r\n            >\r\n                <div className={styles['modal-body']}>\r\n                    <div className={styles['create-container']}>\r\n                        <div className={styles['create-input-container']} style={{background: color}}>\r\n                            <input type='text' \r\n                            className={styles['create-input']}\r\n                            onInput={updateTitle}\r\n                            placeholder='Введите название доски'\r\n                            style={{background: color}}\r\n                            />\r\n                             <button className={styles['close-button']} onClick={toggleModalWindow}>&#10005;</button>\r\n                        </div>\r\n                        {\r\n                            title?\r\n                            (\r\n                                <button className={styles['modal-create-button']} onClick={createBoard}>Создать доску</button>\r\n                            ):\r\n                            <button className={styles['modal-create-button_disable']}>Создать доску</button>\r\n                        }\r\n                    </div>\r\n                    <div className={styles['color_picker-container']} style={{maxHeight: computeColorPickerItemsHeight() + 'px'}}>\r\n                        {drawColorPickerItems()}\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\index.js",["62","63"],"import { useParams } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport { Table } from './Table';\r\nimport styles from './index.module.css';\r\n\r\nconst tinycolor = require('tinycolor2');\r\n\r\nexport const Board = (props) => {\r\n\r\n    const {id} = useParams();\r\n    const currentBoard = props.boardState.boards.filter(el => el.id == id)[0];\r\n\r\n    const brightenColor = tinycolor(currentBoard.color).brighten(15).toString();\r\n\r\n    const [isAddBoardFormOpen, setIsAddBoardFormOpen] = useState(false);\r\n    const [title, setTitle] = useState('');\r\n\r\n    const drawTables = () => {\r\n        const Elements = [];\r\n\r\n        currentBoard.tables.map((table, index) => {\r\n            Elements.push(\r\n                <Table \r\n                    table={table}\r\n                    board={currentBoard}\r\n                    color={currentBoard.color}\r\n                    key={index}\r\n                />\r\n            );\r\n        })\r\n\r\n        return Elements;\r\n    }\r\n\r\n    return (\r\n        <div className={styles['body']}>\r\n            {drawTables()}\r\n            {\r\n            !isAddBoardFormOpen?\r\n            <div className={styles['addTableButton']} style={{background: currentBoard.color}} onClick={() => setIsAddBoardFormOpen(true)}>\r\n                <p className={styles['pPlus']}>+</p>\r\n                <p className={styles['p']}>Добавить таблицу</p>\r\n            </div>:\r\n            <div className={styles['addTableForm']} style={{background: currentBoard.color}}>\r\n                <input type='text' placeholder='Ввидите название таблици' className={styles['input']} style={{background: brightenColor}} onInput={(e) => setTitle(e.target.value)}/>\r\n                <div className={styles['buttonContainer']}>\r\n                    {\r\n                        title?\r\n                        <button className={styles['button']} style={{background: brightenColor}} onClick={() => {currentBoard.addTable(title); setIsAddBoardFormOpen(false); setTitle('')}}>Создать</button>:\r\n                        <button className={styles['button_disable']} style={{background: brightenColor}}>Создать</button>\r\n                    }\r\n                    <button className={styles['button']} style={{background: brightenColor}} onClick={() => {setIsAddBoardFormOpen(false); setTitle('')}}>Закрыть</button>\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}","C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\BoardView\\index.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\ColorPickerItem\\index.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\Table\\index.js",["64","65","66","67","68"],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\Table\\Card\\index.js",["69"],"import { useDrag } from 'react-dnd';\r\nimport styles from './index.module.css';\r\n\r\nexport const Card = (props) => {\r\n\r\n    const [, drag] = useDrag({\r\n        item: {\r\n        type: 'card',\r\n        TableId: props.table.id,\r\n        CardId: props.card.id\r\n    }\r\n    })\r\n\r\n    return(\r\n        <div className={styles['body'] + ' ' + 'toFind'} style={{background: props.color}} data-id={props.card.id} ref={drag}>{props.card.name}</div>\r\n    );\r\n}","C:\\Users\\Egor2\\React\\trelloapp\\src\\SingleTon\\state.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\index.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\Table\\table.js",["70"],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\Card\\card.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":22,"column":52,"nodeType":"77","messageId":"78","endLine":22,"endColumn":54},{"ruleId":"75","severity":1,"message":"76","line":38,"column":61,"nodeType":"77","messageId":"78","endLine":38,"endColumn":63},{"ruleId":"79","severity":1,"message":"80","line":11,"column":69,"nodeType":"81","messageId":"82","endLine":11,"endColumn":71},{"ruleId":"75","severity":1,"message":"76","line":21,"column":48,"nodeType":"77","messageId":"78","endLine":21,"endColumn":50},{"ruleId":"79","severity":1,"message":"80","line":35,"column":64,"nodeType":"81","messageId":"82","endLine":35,"endColumn":66},{"ruleId":"79","severity":1,"message":"80","line":36,"column":76,"nodeType":"81","messageId":"82","endLine":36,"endColumn":78},{"ruleId":"79","severity":1,"message":"80","line":37,"column":70,"nodeType":"81","messageId":"82","endLine":37,"endColumn":72},{"ruleId":"79","severity":1,"message":"80","line":38,"column":30,"nodeType":"81","messageId":"82","endLine":38,"endColumn":32},{"ruleId":"75","severity":1,"message":"76","line":67,"column":45,"nodeType":"77","messageId":"78","endLine":67,"endColumn":47},{"ruleId":"83","severity":1,"message":"84","line":15,"column":46,"nodeType":"81","messageId":"85","endLine":15,"endColumn":47},{"ruleId":"79","severity":1,"message":"80","line":31,"column":75,"nodeType":"81","messageId":"82","endLine":31,"endColumn":77},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-global-assign","no-unsafe-negation"]