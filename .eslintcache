[{"C:\\Users\\Egor2\\React\\trelloapp\\src\\index.js":"1","C:\\Users\\Egor2\\React\\trelloapp\\src\\App.js":"2","C:\\Users\\Egor2\\React\\trelloapp\\src\\reportWebVitals.js":"3","C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\index.js":"4","C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\index.js":"5","C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\BoardView\\index.js":"6","C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\ColorPickerItem\\index.js":"7","C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\Table\\index.js":"8","C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\Table\\Card\\index.js":"9","C:\\Users\\Egor2\\React\\trelloapp\\src\\SingleTon\\state.js":"10","C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\Table\\table.js":"11","C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\Card\\card.js":"12","C:\\Users\\Egor2\\React\\trelloapp\\src\\utilits\\index.js":"13","C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\Board\\index.js":"14","C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\Filtered\\index.js":"15"},{"size":486,"mtime":1607784760664,"results":"16","hashOfConfig":"17"},{"size":3229,"mtime":1609766530158,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"17"},{"size":3949,"mtime":1609740356568,"results":"20","hashOfConfig":"17"},{"size":4539,"mtime":1609766973567,"results":"21","hashOfConfig":"17"},{"size":1094,"mtime":1609770527706,"results":"22","hashOfConfig":"17"},{"size":237,"mtime":1609740367113,"results":"23","hashOfConfig":"17"},{"size":5221,"mtime":1609771815153,"results":"24","hashOfConfig":"17"},{"size":4679,"mtime":1609789669531,"results":"25","hashOfConfig":"17"},{"size":740,"mtime":1609739463147,"results":"26","hashOfConfig":"17"},{"size":879,"mtime":1609765782410,"results":"27","hashOfConfig":"17"},{"size":295,"mtime":1609789035490,"results":"28","hashOfConfig":"17"},{"size":203,"mtime":1608833013387,"results":"29","hashOfConfig":"17"},{"size":998,"mtime":1609764070481,"results":"30","hashOfConfig":"17"},{"size":857,"mtime":1609740204575,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"cnm794",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"34"},"C:\\Users\\Egor2\\React\\trelloapp\\src\\index.js",[],["69","70"],"C:\\Users\\Egor2\\React\\trelloapp\\src\\App.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\reportWebVitals.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\index.js",["71","72"],"import { Modal } from '@material-ui/core';\r\nimport { useState } from 'react';\r\nimport { BoardView } from './BoardView';\r\nimport { ColorPickerItem } from './ColorPickerItem';\r\nimport styles from './index.module.css';\r\n\r\nconst MAX_SYMBOLS = 30;\r\n\r\nexport const MainPage = (props) => {\r\n\r\n    const [isOpen, setIsopen] = useState(false);\r\n    const [color, setColor] = useState(props.boardState.currentColor);\r\n    const [title, setTitle] = useState('')\r\n\r\n    const toggleModalWindow = () => {\r\n        setIsopen(!isOpen);\r\n    }\r\n\r\n    const drawBoardViews = () => {\r\n        const Elements = [];\r\n\r\n        props.boardState.boards.map((board, index) => {\r\n            Elements.push(\r\n                <BoardView \r\n                    boardState={props.boardState}\r\n                    board={board}\r\n                    updateColor={props.updateColor}\r\n                    key={index}\r\n                />\r\n            )\r\n        })\r\n\r\n        return Elements;\r\n    }\r\n\r\n    const drawColorPickerItems = () => {\r\n        const Elements = [];\r\n\r\n        props.boardState.availableColors.map((color, index) => {\r\n            Elements.push(\r\n                <ColorPickerItem \r\n                    color={color}\r\n                    setColor={setColor}\r\n                    key={index}\r\n                />\r\n            )\r\n        })\r\n\r\n        return Elements;\r\n    }\r\n\r\n    const updateTitle = (e) => {\r\n        setTitle(e.target.value);\r\n    }\r\n\r\n    const createBoard = () => {\r\n        if(title.length > MAX_SYMBOLS){\r\n            alert('Your title is too long!');\r\n            return;\r\n        }\r\n        props.boardState.addBoard(title, color)\r\n\r\n        toggleModalWindow();\r\n    }\r\n\r\n    const computeColorPickerItemsHeight = () => {\r\n        let NumberOfColorPickerItems = props.boardState.availableColors.length;\r\n\r\n        if(NumberOfColorPickerItems % 3 === 0){\r\n            return NumberOfColorPickerItems / 3;\r\n        }\r\n        return Math.floor(NumberOfColorPickerItems / 3) + 1;\r\n    }\r\n\r\n    return (\r\n        <div className={styles['main-body']}>\r\n            <p className={styles['label-p']}>Ваши доски</p>\r\n            <div className={styles['boards_list']}>\r\n                {drawBoardViews()}\r\n                <div className={styles['create_border']}>\r\n                    <button onClick={ toggleModalWindow } className={styles['create-button']}>Создать</button>\r\n                </div>\r\n            </div>\r\n            <Modal \r\n                open={isOpen}\r\n            >\r\n                <div className={styles['modal-body']}>\r\n                    <div className={styles['create-container']}>\r\n                        <div className={styles['create-input-container']} style={{background: color}}>\r\n                            <input type='text' \r\n                            className={styles['create-input']}\r\n                            onInput={updateTitle}\r\n                            placeholder='Введите название доски'\r\n                            style={{background: color}}\r\n                            />\r\n                             <button className={styles['close-button']} onClick={toggleModalWindow}>&#10005;</button>\r\n                        </div>\r\n                        {\r\n                            title?\r\n                            (\r\n                                <button className={styles['modal-create-button']} onClick={createBoard}>Создать доску</button>\r\n                            ):\r\n                            <button className={styles['modal-create-button_disable']}>Создать доску</button>\r\n                        }\r\n                    </div>\r\n                    <div className={styles['color_picker-container']} style={{maxHeight: computeColorPickerItemsHeight() + 'px'}}>\r\n                        {drawColorPickerItems()}\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\index.js",["73","74"],"import { useParams } from 'react-router-dom';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { Table } from './Table';\r\nimport styles from './index.module.css';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useDrop } from 'react-dnd';\r\n\r\nconst tinycolor = require('tinycolor2');\r\nconst requirementClassName = '.toFindTables';\r\n\r\nconst WINDOW_SQUARE = window.innerWidth * window.innerHeight;\r\n\r\nexport const Board = observer((props) => {\r\n\r\n\r\n    useEffect(() => () => {\r\n        props.setIsFiltered(false);\r\n    },[])\r\n\r\n    const {id} = useParams();\r\n    const currentBoard = props.boardState.boards.find(el => el.id === id);\r\n    const brightenColor = tinycolor(currentBoard.color).brighten(15).toString();\r\n\r\n    const [isAddBoardFormOpen, setIsAddBoardFormOpen] = useState(false);\r\n    const [title, setTitle] = useState('');\r\n    const Xcoords = useRef(0);\r\n    const Ycoords = useRef(0);\r\n\r\n    const [{item},drop] = useDrop({\r\n        accept: 'table',\r\n        hover: (item,monitor) => {\r\n            const {x, y} = monitor.getSourceClientOffset();\r\n            Xcoords.current = x;\r\n            Ycoords.current = y;\r\n        },\r\n        drop: () => {\r\n            let tables = Array.from(document.querySelectorAll(requirementClassName));\r\n            tables = tables.filter(table => table.dataset.id !== item.TableId);\r\n            let tablesCoords = tables.map(table => {\r\n              let rect = table.getBoundingClientRect();\r\n              return [rect.x, rect.y];\r\n            });\r\n\r\n            let minDistance = WINDOW_SQUARE;\r\n            let minDistanceIndex = 0;\r\n           \r\n            tablesCoords.forEach(tableoCord => {\r\n                let distance = Math.hypot(tableoCord[0]-Xcoords.current, tableoCord[1]-Ycoords.current);\r\n                if(distance < minDistance){\r\n                   minDistanceIndex += (minDistance === WINDOW_SQUARE)?0:1;\r\n                   minDistance = distance;\r\n                }\r\n              });\r\n\r\n              let tableIndex = currentBoard.tables.findIndex(table => table.id === tables[minDistanceIndex].dataset.id);\r\n              let fromTableIndex = currentBoard.tables.findIndex(table => table.id === item.TableId);\r\n\r\n              const tempIndex = fromTableIndex;\r\n \r\n              fromTableIndex = tableIndex;\r\n              tableIndex = tempIndex;\r\n \r\n              currentBoard.swapTables(fromTableIndex,tableIndex);\r\n       },\r\n       collect: (monitor) => ({item: monitor.getItem()})\r\n    });\r\n\r\n    const drawTables = () => {\r\n        const Elements = [];\r\n\r\n        const tables = props.isFiltered?\r\n        currentBoard.tables.filter(table => table.name.includes(props.searchText)):\r\n        currentBoard.tables;\r\n\r\n        tables.map((table, index) => {\r\n            Elements.push(\r\n                <Table \r\n                    table={table}\r\n                    board={currentBoard}\r\n                    color={currentBoard.color}\r\n                    key={index}\r\n                />\r\n            );\r\n        })\r\n\r\n        return Elements;\r\n    }\r\n\r\n    return (\r\n        <div className={styles['body']} ref={drop}>\r\n            {drawTables()}\r\n            {\r\n            !isAddBoardFormOpen?\r\n            <div className={styles['addTableButton']} style={{background: currentBoard.color}} onClick={() => setIsAddBoardFormOpen(true)}>\r\n                <p className={styles['pPlus']}>+</p>\r\n                <p className={styles['p']}>Добавить таблицу</p>\r\n            </div>:\r\n            <div className={styles['addTableForm']} style={{background: currentBoard.color}}>\r\n                <input type='text' placeholder='Ввидите название таблици' className={styles['input']} style={{background: brightenColor}} onInput={(e) => setTitle(e.target.value)}/>\r\n                <div className={styles['buttonContainer']}>\r\n                    {\r\n                        title?\r\n                        <button className={styles['button']} style={{background: brightenColor}} onClick={() => {currentBoard.addTable(title); setIsAddBoardFormOpen(false); setTitle('')}}>Создать</button>:\r\n                        <button className={styles['button_disable']} style={{background: brightenColor}}>Создать</button>\r\n                    }\r\n                    <button className={styles['button']} style={{background: brightenColor}} onClick={() => {setIsAddBoardFormOpen(false); setTitle('')}}>Закрыть</button>\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n})","C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\BoardView\\index.js",["75"],"import { Link, useHistory } from 'react-router-dom';\r\nimport  styles  from './index.module.css';\r\n\r\nexport const BoardView = (props) => {\r\n\r\n    const history = useHistory();\r\n    let isToDelete = false;\r\n\r\n    const clickHandler = () => {\r\n        if(isToDelete){\r\n            history.replace('');\r\n            props.boardState.deleteBoard(props.board.id);\r\n        }\r\n        else{\r\n            props.boardState.currentColor = props.board.color;\r\n            history.push(`/board/${props.board.id}`);\r\n        }\r\n    }\r\n\r\n    const deleteClickHandler = () => {\r\n        history.push(`/board/${props.board.id}`);\r\n        props.boardState.currentColor = props.board.color;\r\n        isToDelete = true\r\n    }\r\n\r\n    return (\r\n        <div className={styles['body']} style={{background: props.board.color}} onClick={clickHandler}>\r\n            <div className={styles['textContainer']}>\r\n                <p className={styles['p']}>{props.board.title}</p>\r\n            </div>\r\n            <button className={styles['button']} onClick={deleteClickHandler}>&#x2715;</button>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\ColorPickerItem\\index.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\Table\\index.js",["76"],"import { observer } from 'mobx-react-lite';\r\nimport { useState, useRef } from 'react';\r\nimport { useDrag, useDrop } from 'react-dnd';\r\nimport { Card } from './Card';\r\nimport styles from './index.module.css';\r\n\r\nconst tinycolor = require('tinycolor2');\r\nconst requirementClassName = '.toFindCards';\r\n\r\nconst WINDOW_SQUARE = window.innerWidth * window.innerHeight;\r\n\r\nexport const Table = observer((props) => {\r\n\r\n    const Xcoords = useRef(0);\r\n    const Ycoords = useRef(0);\r\n\r\n    const [{item}, drop] = useDrop({\r\n        accept: 'card',\r\n        hover: (item,monitor) => {\r\n            const {x, y} = monitor.getSourceClientOffset();\r\n            Xcoords.current = x;\r\n            Ycoords.current = y;\r\n        },\r\n        drop: () => {\r\n             let cards = Array.from(document.querySelectorAll(requirementClassName));\r\n             cards = cards.filter(card => card.dataset.id !== item.CardId);\r\n             let cardsCoords = cards.map(card => {\r\n               let rect = card.getBoundingClientRect();\r\n               return [rect.x, rect.y];\r\n             });\r\n\r\n             let minDistance = WINDOW_SQUARE;\r\n             let minDistanceIndex = 0;\r\n            \r\n             cardsCoords.forEach(cardCoord => {\r\n                 let distance = Math.hypot(cardCoord[0]-Xcoords.current, cardCoord[1]-Ycoords.current);\r\n                 if(distance < minDistance){\r\n                    minDistanceIndex += (minDistance === WINDOW_SQUARE)?0:1;\r\n                    minDistance = distance;\r\n                 }\r\n               });\r\n             let cardIndex = props.table.cards.findIndex(card => card.id === cards[minDistanceIndex].dataset.id);\r\n             const card = props.table.cards[cardIndex];\r\n             const fromTable = props.board.tables.find(table => table.id === item.TableId);\r\n             let fromCardIndex = fromTable.cards.findIndex(card => card.id === item.CardId);\r\n             const fromCard = fromTable.cards[fromCardIndex];\r\n             if(fromTable.id === props.table.id){\r\n                const temp = fromCardIndex;\r\n\r\n                fromCardIndex = cardIndex;\r\n\r\n                cardIndex = temp;\r\n\r\n                fromTable.swapCards(fromCardIndex,cardIndex);\r\n             }\r\n             else{\r\n                props.table.addCardAtIndex(fromCard.name, card?cardIndex+1:0);\r\n                fromTable.deleteCard(fromCard.id);\r\n             }\r\n        },\r\n        collect: (monitor) => ({item: monitor.getItem()})\r\n    })\r\n\r\n    const [, drag] = useDrag({\r\n        item: {\r\n        type: 'table',\r\n        TableId: props.table.id,\r\n    }\r\n    })\r\n\r\n    const brightenColor = tinycolor(props.color).brighten(15).toString();\r\n\r\n    const [isCreateCardFormOpen, setIsCreateCardFormOpen] = useState(false);\r\n    const [title, setTitle] = useState('');\r\n\r\n    const drawCards = () => {\r\n        const Elements = [];\r\n\r\n        props.table.cards.map((card, index) => {\r\n            Elements.push(\r\n                <Card \r\n                    card={card}\r\n                    table={props.table}\r\n                    color={brightenColor}\r\n                    key={index}\r\n                />\r\n            );\r\n        })\r\n\r\n        return Elements;\r\n    }\r\n\r\n    return(\r\n        <div className={styles['body']} style={{background: props.color}} ref={drop}>\r\n            <div className='toFindTables' ref={drag} data-id={props.table.id}>\r\n                <p className={styles['title']}>{props.table.name}</p>\r\n                <div className={styles['cardContainer']}>\r\n                    {drawCards()}\r\n                </div>\r\n            {\r\n                !isCreateCardFormOpen?\r\n                <button className={styles['button']} style={{background: brightenColor, marginTop: '7px'}} onClick={() => setIsCreateCardFormOpen(true)}>Добавить Карточку</button>:\r\n                <div className={styles['addTableForm']} style={{background: props.color}}>\r\n                    <input type='text' placeholder='Ввидите название таблици' className={styles['input']} style={{background: brightenColor}} onInput={(e) => setTitle(e.target.value)}/>\r\n                    <div className={styles['buttonContainer']}>\r\n                        {\r\n                            title?\r\n                            <button className={styles['button'] + ' ' + styles['fixedSizeButton']} style={{background: brightenColor}} onClick={() => {props.table.addCard(title); setIsCreateCardFormOpen(false); setTitle('')}}>Создать</button>:\r\n                            <button className={styles['button_disable']} style={{background: brightenColor}}>Создать</button>\r\n                        }\r\n                        <button className={styles['button'] + ' ' + styles['fixedSizeButton']} style={{background: brightenColor}} onClick={() => {setIsCreateCardFormOpen(false); setTitle('')}}>Закрыть</button>\r\n                    </div>\r\n                </div>\r\n            }\r\n            <button className={styles['button'] + ' ' + styles['fixedSizeButton']} style={{background: brightenColor, marginTop: '3%'}} onClick={() => {props.board.deleteTable(props.table.id); setTitle('')}}>Удалить</button>\r\n        </div>\r\n        </div>\r\n    );\r\n})","C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\Table\\Card\\index.js",["77"],"import { Modal } from '@material-ui/core';\r\nimport { useState } from 'react';\r\nimport { useDrag } from 'react-dnd';\r\nimport styles from './index.module.css';\r\n\r\nexport const Card = (props) => {\r\n\r\n    const [isOpen,setIsOpen] = useState(false);\r\n    const [isTitleEditing,setIsTitleEditing] = useState(false);\r\n    const [titleText,setTitleText] = useState('');\r\n    const [isDescriptionEditing,setIsDescriptionEditing] = useState(true);\r\n    const [descriptionText,setDescriptionText] = useState('');\r\n\r\n    const [, drag] = useDrag({\r\n        item: {\r\n        type: 'card',\r\n        TableId: props.table.id,\r\n        CardId: props.card.id\r\n    }\r\n    })\r\n\r\n    const titleClickHandler = () => {\r\n        setIsTitleEditing(!isTitleEditing);\r\n        if(!isTitleEditing && titleText){\r\n            props.card.name = titleText;\r\n            setTitleText('');\r\n        }\r\n    }\r\n\r\n    const descriptionClickHandler = () => {\r\n        setIsDescriptionEditing(!isDescriptionEditing);\r\n        if(!isDescriptionEditing && descriptionText){\r\n            props.card.description = descriptionText;\r\n            setDescriptionText('');\r\n        }\r\n    }    \r\n\r\n    return(\r\n        <div>\r\n            <div className={styles['body'] + ' ' + 'toFindCards'} style={{background: props.color}} onClick={() => setIsOpen(true)} data-id={props.card.id} ref={drag}>\r\n                {props.card.name}\r\n                <button className={styles['button']} onClick={() => props.table.deleteCard(props.card.id)}>&#x2715;</button>\r\n            </div>\r\n            <Modal\r\n                open={isOpen}\r\n            >\r\n                <div className={styles['modal-body']}>\r\n                    <div className={styles['wrapper']}>\r\n                        <div className={styles['formContainer']}>\r\n                            <div className={styles['titleContainer']}>\r\n                                <p className={styles['text']}>\r\n                                    Title: \r\n                                    {\r\n                                        isTitleEditing?\r\n                                        <input className={styles['input']} onInput={(e) => setTitleText(e.target.value)}/>:\r\n                                        props.card.name \r\n                                    }\r\n                                    <button className={styles['button']}\r\n                                        style={{color:'#000',fontSize:'18px',textAlign:'center',marginLeft:'5%'}} \r\n                                        onClick={titleClickHandler}>\r\n                                        {\r\n                                            isTitleEditing?\r\n                                            'Apply':\r\n                                            'Edit'\r\n                                        }\r\n                                        </button>\r\n                                </p>\r\n                            </div>\r\n                            <div className={styles['descriptionContainer']}>\r\n                                <p className={styles['text']}>\r\n                                    Description: \r\n                                    {\r\n                                        isDescriptionEditing?\r\n                                        '':\r\n                                        props.card.name \r\n                                    }\r\n                                    <button className={styles['button']}\r\n                                        style={{color:'#000',fontSize:'18px',textAlign:'center',marginLeft:'5%'}} \r\n                                        onClick={descriptionClickHandler}>\r\n                                        {\r\n                                            isDescriptionEditing?\r\n                                            'Apply':\r\n                                            'Edit'\r\n                                        }\r\n                                        </button>\r\n                                </p>\r\n                                {\r\n                                    isDescriptionEditing?\r\n                                    <textarea className={styles['input']} style={{marginLeft:'15%',minHeight:'200px'}} onInput={(e) => setDescriptionText(e.target.value)}/>:\r\n                                    ''\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <button className={styles['button']} style={{color:'#000',display:'flex',alignItems:'flex-start',fontSize:'16px',margin:'7px'}} onClick={() => setIsOpen(false)}>&#x2715;</button>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}","C:\\Users\\Egor2\\React\\trelloapp\\src\\SingleTon\\state.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\Table\\table.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\Card\\card.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\utilits\\index.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\Board\\index.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\Filtered\\index.js",["78","79"],"import { useEffect } from 'react';\r\nimport { BoardView } from '../BoardView';\r\nimport styles from './index.module.css';\r\n\r\nexport const FilteredBoards = (props) => {\r\n\r\n    useEffect(() => () => {\r\n        props.setIsSearching(false);\r\n    },[])\r\n\r\n    const drawBoardViews = () => {\r\n        const Elements = [];\r\n        const filteredBoards = props.boardState.boards.filter(board => board.title.includes(props.searchText));\r\n\r\n        filteredBoards.map((board, index) => {\r\n            Elements.push(\r\n                <BoardView \r\n                    boardState={props.boardState}\r\n                    board={board}\r\n                    key={index}\r\n                />\r\n            )\r\n        })\r\n\r\n        return Elements;\r\n    }\r\n\r\n    return(\r\n        <div className={styles['boards_list']}>\r\n            {drawBoardViews()}\r\n        </div>\r\n    );\r\n}",{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":22,"column":52,"nodeType":"86","messageId":"87","endLine":22,"endColumn":54},{"ruleId":"84","severity":1,"message":"85","line":39,"column":61,"nodeType":"86","messageId":"87","endLine":39,"endColumn":63},{"ruleId":"88","severity":1,"message":"89","line":18,"column":7,"nodeType":"90","endLine":18,"endColumn":9,"suggestions":"91"},{"ruleId":"84","severity":1,"message":"85","line":75,"column":35,"nodeType":"86","messageId":"87","endLine":75,"endColumn":37},{"ruleId":"92","severity":1,"message":"93","line":1,"column":10,"nodeType":"94","messageId":"95","endLine":1,"endColumn":14},{"ruleId":"84","severity":1,"message":"85","line":79,"column":45,"nodeType":"86","messageId":"87","endLine":79,"endColumn":47},{"ruleId":"96","severity":1,"message":"97","line":40,"column":50,"nodeType":"98","messageId":"99","endLine":40,"endColumn":51},{"ruleId":"88","severity":1,"message":"89","line":9,"column":7,"nodeType":"90","endLine":9,"endColumn":9,"suggestions":"100"},{"ruleId":"84","severity":1,"message":"85","line":15,"column":43,"nodeType":"86","messageId":"87","endLine":15,"endColumn":45},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["103"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat",["104"],"no-global-assign","no-unsafe-negation",{"desc":"105","fix":"106"},{"desc":"105","fix":"107"},"Update the dependencies array to be: [props]",{"range":"108","text":"109"},{"range":"110","text":"109"},[538,540],"[props]",[242,244]]