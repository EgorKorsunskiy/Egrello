[{"C:\\Users\\Egor2\\React\\trelloapp\\src\\index.js":"1","C:\\Users\\Egor2\\React\\trelloapp\\src\\App.js":"2","C:\\Users\\Egor2\\React\\trelloapp\\src\\reportWebVitals.js":"3","C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\index.js":"4","C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\index.js":"5","C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\BoardView\\index.js":"6","C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\ColorPickerItem\\index.js":"7","C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\Table\\index.js":"8","C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\Table\\Card\\index.js":"9","C:\\Users\\Egor2\\React\\trelloapp\\src\\SingleTon\\state.js":"10","C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\index.js":"11","C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\Table\\table.js":"12","C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\Card\\card.js":"13","C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\Table\\Card\\Draggable\\Draggable.js":"14"},{"size":486,"mtime":1607784760664,"results":"15","hashOfConfig":"16"},{"size":1756,"mtime":1607891439262,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":3887,"mtime":1607793242864,"results":"19","hashOfConfig":"16"},{"size":2446,"mtime":1607941955932,"results":"20","hashOfConfig":"16"},{"size":527,"mtime":1607788806969,"results":"21","hashOfConfig":"16"},{"size":237,"mtime":1607787304323,"results":"22","hashOfConfig":"16"},{"size":3547,"mtime":1608037594268,"results":"23","hashOfConfig":"16"},{"size":539,"mtime":1608021811023,"results":"24","hashOfConfig":"16"},{"size":579,"mtime":1607785511256,"results":"25","hashOfConfig":"16"},{"size":404,"mtime":1607940729890,"results":"26","hashOfConfig":"16"},{"size":576,"mtime":1607944667349,"results":"27","hashOfConfig":"16"},{"size":211,"mtime":1607943939113,"results":"28","hashOfConfig":"16"},{"size":1128,"mtime":1608021886389,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"cnm794",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},"C:\\Users\\Egor2\\React\\trelloapp\\src\\index.js",[],["62","63"],"C:\\Users\\Egor2\\React\\trelloapp\\src\\App.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\reportWebVitals.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\index.js",["64","65"],"import { Modal } from '@material-ui/core';\r\nimport { useState } from 'react';\r\nimport { BoardView } from './BoardView';\r\nimport { ColorPickerItem } from './ColorPickerItem';\r\nimport styles from './index.module.css';\r\n\r\nconst MAX_SYMBOLS = 30;\r\n\r\nexport const MainPage = (props) => {\r\n\r\n    const [isOpen, setIsopen] = useState(false);\r\n    const [color, setColor] = useState('rgb(176, 70, 50)');\r\n    const [title, setTitle] = useState('')\r\n\r\n    const toggleModalWindow = () => {\r\n        setIsopen(!isOpen);\r\n    }\r\n\r\n    const drawBoardViews = () => {\r\n        const Elements = [];\r\n\r\n        props.boardState.boards.map((board, index) => {\r\n            Elements.push(\r\n                <BoardView \r\n                    board={board}\r\n                    updateColor={props.updateColor}\r\n                    key={index}\r\n                />\r\n            )\r\n        })\r\n\r\n        return Elements;\r\n    }\r\n\r\n    const drawColorPickerItems = () => {\r\n        const Elements = [];\r\n\r\n        props.boardState.availableColors.map((color, index) => {\r\n            Elements.push(\r\n                <ColorPickerItem \r\n                    color={color}\r\n                    setColor={setColor}\r\n                    key={index}\r\n                />\r\n            )\r\n        })\r\n\r\n        return Elements;\r\n    }\r\n\r\n    const updateTitle = (e) => {\r\n        setTitle(e.target.value);\r\n    }\r\n\r\n    const createBoard = () => {\r\n        if(title.length > MAX_SYMBOLS){\r\n            alert('Your title is too long!');\r\n            return;\r\n        }\r\n        props.boardState.addBoard(title, color)\r\n\r\n        toggleModalWindow();\r\n    }\r\n\r\n    const computeColorPickerItemsHeight = () => {\r\n        let NumberOfColorPickerItems = props.boardState.availableColors.length;\r\n\r\n        if(NumberOfColorPickerItems % 3 === 0){\r\n            return NumberOfColorPickerItems / 3;\r\n        }\r\n        return Math.floor(NumberOfColorPickerItems / 3) + 1;\r\n    }\r\n\r\n    return (\r\n        <div className={styles['main-body']}>\r\n            <p className={styles['label-p']}>Ваши доски</p>\r\n            <div className={styles['boards_list']}>\r\n                {drawBoardViews()}\r\n                <div className={styles['create_border']}>\r\n                    <button onClick={ toggleModalWindow } className={styles['create-button']}>Создать</button>\r\n                </div>\r\n            </div>\r\n            <Modal \r\n                open={isOpen}\r\n            >\r\n                <div className={styles['modal-body']}>\r\n                    <div className={styles['create-container']}>\r\n                        <div className={styles['create-input-container']} style={{background: color}}>\r\n                            <input type='text' \r\n                            className={styles['create-input']}\r\n                            onInput={updateTitle}\r\n                            placeholder='Введите название доски'\r\n                            style={{background: color}}\r\n                            />\r\n                             <button className={styles['close-button']} onClick={toggleModalWindow}>&#10005;</button>\r\n                        </div>\r\n                        {\r\n                            title?\r\n                            (\r\n                                <button className={styles['modal-create-button']} onClick={createBoard}>Создать доску</button>\r\n                            ):\r\n                            <button className={styles['modal-create-button_disable']}>Создать доску</button>\r\n                        }\r\n                    </div>\r\n                    <div className={styles['color_picker-container']} style={{maxHeight: computeColorPickerItemsHeight() + 'px'}}>\r\n                        {drawColorPickerItems()}\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\index.js",["66","67"],"import { useParams } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport { Table } from './Table';\r\nimport styles from './index.module.css';\r\n\r\nconst tinycolor = require('tinycolor2');\r\n\r\nexport const Board = (props) => {\r\n\r\n    const {id} = useParams();\r\n    const currentBoard = props.boardState.boards.filter(el => el.id == id)[0];\r\n\r\n    const brightenColor = tinycolor(currentBoard.color).brighten(15).toString();\r\n\r\n    const [isAddBoardFormOpen, setIsAddBoardFormOpen] = useState(false);\r\n    const [title, setTitle] = useState('');\r\n\r\n    const drawTables = () => {\r\n        const Elements = [];\r\n\r\n        currentBoard.tables.map((table, index) => {\r\n            Elements.push(\r\n                <Table \r\n                    table={table}\r\n                    board={currentBoard}\r\n                    color={currentBoard.color}\r\n                    key={index}\r\n                />\r\n            );\r\n        })\r\n\r\n        return Elements;\r\n    }\r\n\r\n    return (\r\n        <div className={styles['body']}>\r\n            {drawTables()}\r\n            {\r\n            !isAddBoardFormOpen?\r\n            <div className={styles['addTableButton']} style={{background: currentBoard.color}} onClick={() => setIsAddBoardFormOpen(true)}>\r\n                <p className={styles['pPlus']}>+</p>\r\n                <p className={styles['p']}>Добавить таблицу</p>\r\n            </div>:\r\n            <div className={styles['addTableForm']} style={{background: currentBoard.color}}>\r\n                <input type='text' placeholder='Ввидите название таблици' className={styles['input']} style={{background: brightenColor}} onInput={(e) => setTitle(e.target.value)}/>\r\n                <div className={styles['buttonContainer']}>\r\n                    {\r\n                        title?\r\n                        <button className={styles['button']} style={{background: brightenColor}} onClick={() => {currentBoard.addTable(title); setIsAddBoardFormOpen(false); setTitle('')}}>Создать</button>:\r\n                        <button className={styles['button_disable']} style={{background: brightenColor}}>Создать</button>\r\n                    }\r\n                    <button className={styles['button']} style={{background: brightenColor}} onClick={() => {setIsAddBoardFormOpen(false); setTitle('')}}>Закрыть</button>\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}","C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\BoardView\\index.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Main\\ColorPickerItem\\index.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\Table\\index.js",["68","69","70","71"],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\Table\\Card\\index.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\SingleTon\\state.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\index.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\Table\\table.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Module\\Card\\card.js",[],"C:\\Users\\Egor2\\React\\trelloapp\\src\\Board\\Table\\Card\\Draggable\\Draggable.js",["72"],"import React from 'react';\n\nconst CHILD_WIDTH = 15;\n\nexport class Draggable extends React.Component {\n\n    mouseDownHandler = e => {\n        document.body.style.userSelect = 'none';\n        window.addEventListener('mousemove', this.mouseMoveHandler);\n        window.addEventListener('mouseup', this.mouseUpHandler);\n    }\n\n    mouseUpHandler = () => {\n        document.body.style.userSelect = 'auto';\n        window.removeEventListener('mousemove', this.mouseMoveHandler);\n        window.removeEventListener('mouseup', this.mouseUpHandler);\n    }\n\n    mouseMoveHandler = e => {\n        this.props.setX(e.clientX);\n        this.props.setY(e.clientY);\n    }\n\n    componentWillUnmount() {\n        document.body.style.userSelect = 'auto';\n        window.removeEventListener('mousemove', this.mouseMoveHandler);\n        window.removeEventListener('mouseup', this.mouseUpHandler);\n    }\n\n    render() {\n        return (\n            React.Children.only(React.cloneElement(\n                this.props.children,\n                {\n                    onMouseDown: this.mouseDownHandler\n                }\n              ))\n        )\n    }\n}",{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":22,"column":52,"nodeType":"79","messageId":"80","endLine":22,"endColumn":54},{"ruleId":"77","severity":1,"message":"78","line":38,"column":61,"nodeType":"79","messageId":"80","endLine":38,"endColumn":63},{"ruleId":"81","severity":1,"message":"82","line":11,"column":69,"nodeType":"83","messageId":"84","endLine":11,"endColumn":71},{"ruleId":"77","severity":1,"message":"78","line":21,"column":48,"nodeType":"79","messageId":"80","endLine":21,"endColumn":50},{"ruleId":"85","severity":1,"message":"86","line":16,"column":12,"nodeType":"87","messageId":"88","endLine":16,"endColumn":13},{"ruleId":"81","severity":1,"message":"82","line":22,"column":75,"nodeType":"83","messageId":"84","endLine":22,"endColumn":77},{"ruleId":"81","severity":1,"message":"82","line":23,"column":65,"nodeType":"83","messageId":"84","endLine":23,"endColumn":67},{"ruleId":"77","severity":1,"message":"78","line":41,"column":45,"nodeType":"79","messageId":"80","endLine":41,"endColumn":47},{"ruleId":"85","severity":1,"message":"89","line":3,"column":7,"nodeType":"87","messageId":"88","endLine":3,"endColumn":18},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'x' is assigned a value but never used.","Identifier","unusedVar","'CHILD_WIDTH' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]